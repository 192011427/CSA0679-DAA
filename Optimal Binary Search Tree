#include <stdio.h>
#include<stdlib.h>
#define NMAX 20

typedef struct OBST{
	int KEY;
	struct OBST *left, *right;
}OBST;

int C[NMAX][NMAX];
int W[NMAX][NMAX];
int R[NMAX][NMAX];
int q[NMAX];
int p[NMAX];

int NUMBER_OF_KEYS;
int KEYS[NMAX];
OBST *ROOT;

void COMPUTE_W_C_R(){
	int x, min;
	int i, j, k, h, m;


	for(i = 0; i <= NUMBER_OF_KEYS; i++) {
		W[i][i] = q[i];
		for(j = i + 1; j <= NUMBER_OF_KEYS; j++)
			W[i][j] = W[i][j-1] + p[j] + q[j];
	}


	for(i = 0; i <= NUMBER_OF_KEYS; i++)
		C[i][i] = W[i][i];
	for(i = 0; i <= NUMBER_OF_KEYS - 1; i++) {
		j = i + 1;
		C[i][j] = C[i][i] + C[j][j] + W[i][j];
		R[i][j] = j;
	}
	for(h = 2; h <= NUMBER_OF_KEYS; h++)
		for(i = 0; i <= NUMBER_OF_KEYS - h; i++) {
			j = i + h;
			m = R[i][j-1];
			min = C[i][m-1] + C[m][j];
			for(k = m+1; k <= R[i+1][j]; k++){
				x = C[i][k-1] + C[k][j];
				if(x < min) {
					m = k;
					min = x;
				}
			}
			C[i][j] = W[i][j] + min;
			R[i][j] = m;
		}


	printf("\nThe weight matrix W:\n");
	for(i = 0; i <= NUMBER_OF_KEYS; i++){
		for(j = i; j <= NUMBER_OF_KEYS; j++)
			printf("%d ", W[i][j]);
		printf("\n");
	}


	printf("\nThe cost matrix C:\n");
	for(i = 0; i <= NUMBER_OF_KEYS; i++) {
		for(j = i; j <= NUMBER_OF_KEYS; j++)
			printf("%d ", C[i][j]);
		printf("\n");
	}



	printf("\nThe root matrix R:\n");
	for(i = 0; i <= NUMBER_OF_KEYS; i++) {
		for(j = i; j <= NUMBER_OF_KEYS; j++)
			printf("%d ", R[i][j]);
		printf("\n");
	}
}


OBST *CONSTRUCT_OBST(int i, int j){
	OBST *p;

	if(i == j)
		p = NULL;
	else{
		p = (OBST*) calloc(1, sizeof(OBST));
		p->KEY = KEYS[R[i][j]];
		p->left = CONSTRUCT_OBST(i, R[i][j] - 1);
		p->right = CONSTRUCT_OBST(R[i][j], j);
	}
	return p;
}
